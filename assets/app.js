angular.module("salaryGuide",["ui.router"]),angular.module("salaryGuide").service("adSVC",function(){var e={desktop:!0,phone:!1};this.getDevice=function(){var t=window.innerWidth;return t>500&&(e.desktop=!0,e.phone=!1),500>t&&(e.desktop=!1,e.phone=!0),e}}),angular.module("salaryGuide").controller("detailCTRL",["$scope","$stateParams","searchSVC","adSVC",function(e,t,a,i){a.details({id:t.id}).success(function(t){e.person=t}),e.device=i.getDevice(),$(window).resize(function(){e.$apply(function(){e.device=i.getDevice()})})}]),angular.module("salaryGuide").controller("mainCTRL",["$scope","adSVC",function(e,t){$(document).ready(function(){$("#carousel").slick({infinite:!0,slidesToShow:1,slidesToScroll:1,arrows:!0,adaptiveHeight:!0,variableWidth:!0,centerMode:!0})}),e.device=t.getDevice(),$(window).resize(function(){e.$apply(function(){e.device=t.getDevice()})})}]),angular.module("salaryGuide").config(["$stateProvider",function(e,t){e.state("home",{url:"/",templateUrl:"index.html",controller:"mainCTRL"}).state("search",{url:"/search",templateUrl:"search.html",controller:"searchCTRL",resolve:{preloadOBJ:["$http",function(e){return e({method:"GET",url:"/api/departments"})}]}}).state("details",{url:"/details/:id",templateUrl:"details.html",controller:"detailCTRL"})}]).run(["$state",function(e){e.go("home"),$(document).foundation()}]),angular.module("salaryGuide").controller("searchCTRL",["$scope","searchSVC","$location","$state","adSVC","preloadOBJ",function(e,t,a,i,n,s){function c(e){return e.charAt(0).toUpperCase()+e.slice(1)}e.results=[],t.cache?(e.results=t.cache,e.display=!0):(e.results=null,e.display=null),e.searchByName=function(a){for(var i=a.split(" "),n=0;n<i.length;n++)i[n]=c(i[n]);a=i.join(" "),i=a.split("'");for(var n=0;n<i.length;n++)i[n]=c(i[n]);a=i.join("'"),t.search({name:a}).success(function(a){e.results=a,t.setCache(a)}),e.name=null,e.display=a},e.searchByDept=function(a){t.search({dept:a}).success(function(a){e.results=a,t.setCache(a)}),e.dept=null,e.display=a},e.searchByCampus=function(a){t.search({campus:a}).success(function(a){e.results=a,t.setCache(a)}),e.campus=null,e.display=a},e.details=function(e){i.go("details",{id:e})},e.device=n.getDevice(),$(window).resize(function(){e.$apply(function(){e.device=n.getDevice()})}),e.preload=s.data}]),angular.module("salaryGuide").service("searchSVC",["$http",function(e){this.search=function(t){return e.post("/api/search",t)},this.details=function(t){return e.post("/api/details",t)},this.cache=null,this.setCache=function(e){this.cache=e}}]);
//# sourceMappingURL=data:application/json;base64,