angular.module("salaryGuide",["ui.router"]),angular.module("salaryGuide").controller("adCTRL",["$scope","adSVC",function(e,a){e.device=a.getDevice(),$(window).resize(function(){e.$apply(function(){e.device=a.getDevice()})})}]),angular.module("salaryGuide").service("adSVC",function(){var e={desktop:!0,phone:!1};this.getDevice=function(){var a=window.innerWidth;return a>500&&(e.desktop=!0,e.phone=!1),500>a&&(e.desktop=!1,e.phone=!0),e}}),angular.module("salaryGuide").controller("detailCTRL",["$scope","$stateParams","searchSVC","adSVC","$controller",function(e,a,t,s,l){l("adCTRL",{$scope:e}),t.details({id:a.id}).success(function(a){e.person=a})}]),angular.module("salaryGuide").controller("mainCTRL",["$scope","adSVC","$controller",function(e,a,t){t("adCTRL",{$scope:e}),$(document).ready(function(){$("#carousel").slick({infinite:!0,slidesToShow:1,slidesToScroll:1,arrows:!0,adaptiveHeight:!0,variableWidth:!0,centerMode:!0})})}]),angular.module("salaryGuide").config(["$stateProvider",function(e,a){e.state("home",{url:"/",templateUrl:"index.html",controller:"mainCTRL"}).state("search",{url:"/search",templateUrl:"search.html",controller:"searchCTRL",resolve:{preloadOBJ:["$http",function(e){return e({method:"GET",url:"/api/departments"})}]}}).state("details",{url:"/details/:id",templateUrl:"details.html",controller:"detailCTRL"})}]).run(["$state",function(e){e.go("home"),$(document).foundation()}]),angular.module("salaryGuide").controller("searchCTRL",["$scope","searchSVC","$location","$state","adSVC","preloadOBJ","$controller",function(e,a,t,s,l,n,r){function o(e){return e.charAt(0).toUpperCase()+e.slice(1)}r("adCTRL",{$scope:e}),e.results=[],a.cache?(e.results=a.cache,e.display=!0):(e.results=null,e.display=null),e.searchByName=function(t){for(var s=t.split(" "),l=0;l<s.length;l++)s[l]=o(s[l]);t=s.join(" "),s=t.split("'");for(var l=0;l<s.length;l++)s[l]=o(s[l]);t=s.join("'"),a.search({name:t}).success(function(t){e.results=t,a.setCache(t)}),e.name=null,e.display=t},e.searchByDept=function(t){a.search({dept:t}).success(function(t){e.results=t,a.setCache(t)}),e.dept=null,e.display=t},e.searchByCampus=function(t){a.search({campus:t}).success(function(t){e.results=t,a.setCache(t)}),e.campus=null,e.display=t},e.details=function(e){s.go("details",{id:e})},e.preload=n.data}]),angular.module("salaryGuide").service("searchSVC",["$http",function(e){this.search=function(a){return e.post("/api/search",a)},this.details=function(a){return e.post("/api/details",a)},this.cache=null,this.setCache=function(e){this.cache=e}}]);
//# sourceMappingURL=data:application/json;base64,
